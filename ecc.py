from __future__ import division
from rsa_crt import KeyHolder , rabinMiller , generate_prime_num
from ecdsa.ecdsa import curve_brainpoolp512r1 , generator_brainpoolp512r1
import random

# given generated p
p = 0xAADD9DB8DBE9C48B3FD4E6AE33C9FC07CB308DB3B3C9D20ED6639CCA703308717D4D9B009BC66842AECDA12AE6A380E62881FF2F2D82C68528AA6056583A48F3

# configuration of curve
a = 0x7830A3318B603B89E2327145AC234CC594CBDD8D3DF91610A83441CAEA9863BC2DED5D5AA8253AA10A2EF1C98B9AC8B57F1117A72BF2C7B9E7C1AC4D77FC94CA
b = 0x3DF91610A83441CAEA9863BC2DED5D5AA8253AA10A2EF1C98B9AC8B57F1117A72BF2C7B9E7C1AC4D77FC94CADC083E67984050B75EBAE5DD2809BD638016F723

from math import sqrt

def findPrimefactors(s, n) :

    # Pr the number of 2s that divide n
    while (n % 2 == 0) :
        s.add(2)
        n = n // 2

    # n must be odd at this po. So we can
    # skip one element (Note i = i +2)
    for i in range(3, int(sqrt(n)), 2):

        # While i divides n, pr i and divide n
        while (n % i == 0) :

            s.add(i)
            n = n // i

    # This condition is to handle the case
    # when n is a prime number greater than 2
    if (n > 2) :
        s.add(n)

# Function to find smallest primitive
# root of n
def findPrimitive( n) :
    s = set()

    # Check if n is prime or not
    if (rabinMiller(n) == False):
        return -1

    phi = n - 1

    # Find prime factors of phi and store in a set
    findPrimefactors(s, phi)

    # Check for every number from 2 to phi
    for r in range(2, phi + 1):

        flag = False
        for it in s:
            if (pow(r, phi // it, n) == 1):

                flag = True
                break

        # If there was no power with value 1.
        if (flag == False):
            return r

    # If no primitive root found
    return -1


if __name__ == "__main__":
    # 15360 bit prime number
    prime_number = 3660073423622074726579928266636451646654194168258664523154404515203035960370326276632196157995566812163528721383855713285235686928964527389854486534374484856030045454399514238713209014594236885217676501700718442366920731639908194408435595849400837495605245666623516214312942152304602295840537198337631207529003071263787358572786393315476728114803711210524789286247557154345513517872671852778084462133801056859961016734148317099981975369280606575598859980226015466020431896413692453276153613383507959272156529573251406307951223908089676816122506222843497287418638745863219431412124599307129343545530401808095854579825332991299667637299737519391459279642820572644064544039626059451538526421760720925667648120390615404774981406538932688209341555315266963069885331950523950624961140342769898287493201904908414400584386406164801822164162139127377581625460066017635344787949483361696374483016456170597631467809275181739470586557947018071158230644261720734833385326866443039411460391243740739647485428182139449214270271984314815529221042991822165032634217870615923498729438188408169257899128531532327006657232865849290517555052067778665636332174805421795026540869330672667925621129202840469523299201463667364560933685564220369063146353418318711229152455029384102253277924679470551471302571127479073936770914675394645627069162145773905298983514588698010886654313807758624751606284389304755440903032186657846808695967305819651060891073764948057912477885421024122840649532785464087381746196494710118336306237951255706212710344672405474428731676870939414721565600037649197525510139670733448362394234774778197535100832040162844317221415310363816289742909897115403499616416489300891192496710353393161655899591121720205496375945459456971231579020454977987564202445193419873644709091296890089167235077402770188061322157066901196444740645182881604424578228577789537274905970526645815912169455049817506176451420036059715765674434146098719086757159046380768538752185900946512192676604685735106374461125011604141231256683518129973022377651002320398311248508491399120033673777846600539957779969682667531500071461957024897917098077763515233610007153046809962424912363346607447478731598756290304529533983930354334807264202070211476056194615204307664995531591273372216216518700855914222905411279271944383645255895827068514044732054712418053164596919637359072419016117467580901971409942597178176344738420299037671257965271512540972902616241282459879721655061950302613658446684525175046075370016921031887517350495425751275520902759157444596802093023617987288820759001452203451453325379512323890171115406878293124522459492841243913131448435914052485427517687583964824081147615945165847170538881137376176481469510603044241442376132300639123163291431479267845391252489156102531159128001686647017232162173995017752795024606091104113429903620652001614836269076882756921653957802406456703162354423087918573861234395389855987454327221829421111022059399048080088197760983621238835099975101808357725096777876435913611768745500001826911359830079611216898458890537918512392094876127241215407503044134916023270257139567478939276895916848035989827127637762349794312958781822387290224030420058428370700315206088951648238352373340603280691451972530331196349380436368874171135202212073496928378201198825155501352735372171108956166088837623684968190557884368020775596496520439587859469207538578799400855751702310080719776420826030457909070252092142398997323030704367605951374580091601904828915266081991984950113285233200267527625686396762026605595260230505034356872555848658018908015910554904050555750575915096303069206892602511420243131167897750600966638195527854574018118573554131291939308545404974637298272270196037583353601221965093056795680522425015620114565481330943631969287142548881812192973443768920616781402321489773333991207521850789236292816070001792901442450759981308778564702615643799995092408210555160773458800888440775046494062846547270713304431104642461868023931251008077891908118662195853782905195405577354111447032977445544733089480324525114082365348292299833048926565906374842591455249950657102595882511241834823835891108496756524415906808429777758986504295844925578810157550926907394992548153633063197335960620792382411376527340943901469122047182187351078723405976168152292767716472822174184391336731135947878606787550735042419348736370657430289646376089298286621823322570393001726169558397181634637885145746901808480736273123364040640183792723231798428477517323708129811627456634615493059788423793185861257398099544436700303025998290745482932432532453476758555644456459202269495794283095431750650316891351345829983182427390144217143630127428401


    # 15360 bit RSA key configuration
    alice_key = (
        6191416311412576535015544290779892051835281924472110909265991046616482703750751849715371303094631074416198353594661576598043977208190950338330069093087571495325796151057472782807595178525151163751158630474091099858439954567857514477234785037967799858701303806435398573122634153135458612807065873662115188845182379103159265223574081249880669887832076497467163456460253929362686544238220056039114435744037630125168394017495661334062826415893520594567725700705453881308019538771040967037948438254160951518584452412535004999310474545041067060933402370201381612490885661589905953059312899234279980929864022322476172501230447031711123890443519671953146221867551118345670797916677616473456369743723572559460750593464005279950573881808271235560903985051086554209756818809101861
        , 6191416311412576535015544290779892051835281924472110909265991046616482703750751849715371303094631074416198353594661576598043977208190950338330069093087571495325796151057472782807595178525151163751158630474091099858439954567857514477234785037967799858701303806435398573122634153135458612807065873662115188845182379103159265223574081249880669887832076497467163456460253929362686544238220056039114435744037630125168394017495661334062826415893520594567725700705453881308019538771040967037948438254160951518584452412535004999310474545041067060933402370201381612490885661589905953059312899234279980929864022322476172501230447031711123890443519671953146221867551118345670797916677616473456369743723572559460750593464005279950573881808271235560903985051086554209756818809101860
        , 5781518893051930799309543571473544002294148175611023518686431751019921323832985322254597509758394624152681922739090696064111308084300520749404541926021595366961324031834907756918054324037390115946164214437050416853546630544545349165918553975951249332545566004877432815944799104856946274320754428461205475705729983530681379530183717841458056265322595918786492157215534132802206003952373
        , 1070897877520256674227739770755619785333386210705894652398224929655065557883072602111621239550456296237963843893337230536942984286940790853920785961959723770960292127985284942615945714781774188995670841848867402604384518438256136812353443217715776345197883291593868722866224052690640542517199014070767816619404259237026176274436219522446468705899279828448279833927383264433474792454257)
    bob_key = (
        52839399705972709295361025363448669516878960303241036354562502458538275450978936527162645544228008023261589335101914443572669001553721440359516634901673960678680311383442627015384710362008238983242798615808756947921916634483098749544746229946825564957199435006976440328200278260796679010986063328193058043674084280024106214884397256135626490196271576495910624042492624987862970706932735298693618449407949927046882040825640020868234245652849895258867256126745018131074836094537063879254237255544846482046483687664825808270818086782707959667692355977500247364667696739688714731603621079864381895907256959381099734064474844860072726043183008994941510359680286661847765751290410757963446516261362718188272792117403794034957859180113195397583722839871230525384480350864146299
        , 52839399705972709295361025363448669516878960303241036354562502458538275450978936527162645544228008023261589335101914443572669001553721440359516634901673960678680311383442627015384710362008238983242798615808756947921916634483098749544746229946825564957199435006976440328200278260796679010986063328193058043674084280024106214884397256135626490196271576495910624042492624987862970706932735298693618449407949927046882040825640020868234245652849895258867256126745018131074836094537063879254237255544846482046483687664825808270818086782707959667692355977500247364667696739688714731603621079864381895907256959381099734064474844860072726043183008994941510359680286661847765751290410757963446516261362718188272792117403794034957859180113195397583722839871230525384480350864146298
        , 4050479701732769686876263543263960852449414846495020737766705406499007749772599247930649289568091772231511920815897804021860222617235261200505289529712881852067929550285819029410043021371150611948016550882483058026182883443937419692271429635818087197013711841206072249698082165953363216229264223436259039009245458049101660666116181892037026534192759959138181313302171178495046575941969
        , 13045220220056490380490448756451944871747462473911635430455865129773375749867841415788590654797353624959344290406402242339706418814621214824097738685868535282221236715852445758485988122735238355583958454781211527054703771268697101632765036773608642282049172131700808342589343834394662859002733044424956992387979122429925277226233438471432183826292632001036272835102579153770719873378571)

    print("===================================================================")
    print("Diffie Hellman")
    print("===================================================================")
    alice = KeyHolder( name="alice" , assigned_key=True, key=alice_key )
    bob = KeyHolder( name="bob" ,assigned_key=True, key=bob_key )
    shared_bases  = random.getrandbits(15360)

    alice.compute_dh_pub_secret(prime_number , shared_bases)
    bob.compute_dh_pub_secret(prime_number , shared_bases)

    # secret key that we used is e in RSA
    shared_key_a = alice.compute_dh_shared_secret( bob.public , prime_number)
    shared_key_b = bob.compute_dh_shared_secret( alice.public , prime_number)
    print("They should be equal" , shared_key_a == shared_key_b)
    print("===================================================================")
    print("ECDH")
    print("===================================================================")
    alice.compute_ecdh_pub_secret( generator_brainpoolp512r1 )
    bob.compute_ecdh_pub_secret (  generator_brainpoolp512r1 )

    # ECDH demo
    shared_key_a = alice.compute_ecdh_shared_secret( bob.ec_public )
    shared_key_b = bob.compute_ecdh_shared_secret( alice.ec_public)
    print("They should be equal" , shared_key_a == shared_key_b)
